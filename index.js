import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import 'dotenv/config';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// H√†m ti·ªán √≠ch: X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi s·ªë ti·ªÅn
const parseAmount = (amount) => {
    if (amount.toLowerCase().endsWith('k')) {
        return parseFloat(amount.replace('k', '').replace(/,/g, '')) * 1000;
    } else if (amount.toLowerCase().includes('tri·ªáu')) {
        return parseFloat(amount.replace('tri·ªáu', '').replace(/,/g, '').trim()) * 1000000;
    }
    return parseFloat(amount.replace(/[^\d.]/g, ''));
};

// H√†m ti·ªán √≠ch: G·ª≠i l·ªói t·ªõi ng∆∞·ªùi d√πng
const sendErrorMessage = (chatId, error) => {
    console.error('Error:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è *Oops! ƒê√£ c√≥ l·ªói x·∫£y ra.* Vui l√≤ng th·ª≠ l·∫°i sau nh√©! üò¢', { parse_mode: 'Markdown' });
};

// H√†m hi·ªÉn th·ªã Inline Keyboard
const sendInlineKeyboard = (chatId) => {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìâ T·ªïng chi', callback_data: 'totalExpense' },
                    { text: 'üìà T·ªïng thu', callback_data: 'totalIncome' }
                ],
                [
                    { text: 'üí∞ T·ªïng c√≤n l·∫°i', callback_data: 'totalRemaining' }
                ],
                [
                    { text: 'üóëÔ∏è X√≥a d·ªØ li·ªáu', callback_data: 'deleteAllData' }
                ]
            ]
        }
    };

    bot.sendMessage(
        chatId,
        'üéØ *B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?* H√£y ch·ªçn m·ªôt trong c√°c m·ª•c b√™n d∆∞·ªõi nh√©! üëá',
        { parse_mode: 'Markdown', ...options }
    );
};

// H√†m ti·ªán √≠ch: G·ªçi API
const callApi = async (url) => {
    try {
        const res = await fetch(url);
        console.log('API Response:', JSON.stringify(res, null, 2)); // Log response t·ª´ API
        return await res.json();
    } catch (err) {
        throw new Error('API call failed');
    }
};

// X·ª≠ l√Ω tin nh·∫Øn ch√†o m·ª´ng khi l·ªánh `/start` ƒë∆∞·ª£c g·ª≠i
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    if (msg.text === '/start') {
        const userName = msg.from.first_name || 'b·∫°n';
        bot.sendMessage(
            chatId,
            `üéâ *Xin ch√†o, ${userName}!*\n\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n. üè¶\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh sau:\n- üìå Ghi chi ti√™u: \`15k ƒÉn s√°ng\`\n- üìå Ghi thu nh·∫≠p: \`+7tri·ªáu ti·ªÅn l∆∞∆°ng\`\n- üìâ Xem t·ªïng chi: \`t·ªïng chi\`\n- üìà Xem t·ªïng thu: \`t·ªïng thu\`\n- üí∞ Xem s·ªë ti·ªÅn c√≤n l·∫°i: \`t·ªïng c√≤n l·∫°i\`\n\nH√£y b·∫Øt ƒë·∫ßu qu·∫£n l√Ω t√†i ch√≠nh c·ªßa b·∫°n ngay h√¥m nay nh√©! üöÄ`,
            { parse_mode: 'Markdown' }
        );
    }
});

// H√†m x·ª≠ l√Ω giao d·ªãch (Ti·ªÅn v√†o/Ti·ªÅn ra)
const handleTransaction = async (chatId, type, amount, note, timestamp) => {
    const url = new URL(process.env.WEBHOOK_URL);
    url.searchParams.append('amount', amount);
    url.searchParams.append('type', type);
    url.searchParams.append('note', note);
    url.searchParams.append('timestamp', timestamp);

    try {
        const data = await callApi(url);
        console.log('Transaction Response:', data);
        if (data.status === 'success') {
            bot.sendMessage(
                chatId,
                `‚úÖ *Ghi nh·∫≠n th√†nh c√¥ng!*\n\nüìù *Chi ti·∫øt:*\n- üíµ *S·ªë ti·ªÅn*: ${amount.toLocaleString('vi-VN')} VND\n- üóÇÔ∏è *Lo·∫°i*: ${type}\n- ‚úçÔ∏è *Ghi ch√∫*: ${note}\n- üïí *Th·ªùi gian*: ${timestamp}`,
                { parse_mode: 'Markdown' }
            );
            sendInlineKeyboard(chatId); // Hi·ªÉn th·ªã n√∫t b·∫•m sau khi ghi nh·∫≠n th√†nh c√¥ng
        } else {
            bot.sendMessage(chatId, `‚ùå Kh√¥ng th·ªÉ ghi nh·∫≠n giao d·ªãch. Ph·∫£n h·ªìi t·ª´ server: *${data.message || 'Unknown error'}*`, { parse_mode: 'Markdown' });
        }
    } catch (err) {
        sendErrorMessage(chatId, err);
    }
};

// H√†m x·ª≠ l√Ω t·ªïng chi, t·ªïng thu v√† t·ªïng c√≤n l·∫°i
const handleSummary = async (chatId, action) => {
    try {
        const url = new URL(process.env.WEBHOOK_URL_V2);
        console.log(`Handle Summary Action: ${action}`);
        if (action === 'totalExpense') {
            url.searchParams.append('action', 'getMonthlyTotal');
            const data = await callApi(url);
            if (data.status === 'success' && typeof data.total === 'number') {
                const total = data.total.toLocaleString('vi-VN');
                bot.sendMessage(chatId, `üìâ *T·ªïng chi ti√™u th√°ng ${new Date().getMonth() + 1}:*\nüíµ ${total} VND`, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, `‚ùå Kh√¥ng th·ªÉ t√≠nh t·ªïng chi ti√™u. Ph·∫£n h·ªìi t·ª´ server: *${data.message || 'Unknown error'}*`, { parse_mode: 'Markdown' });
            }
        } else if (action === 'totalIncome') {
            url.searchParams.append('action', 'getMonthlyIncome');
            const data = await callApi(url);
            if (data.status === 'success' && typeof data.total === 'number') {
                const total = data.total.toLocaleString('vi-VN');
                bot.sendMessage(chatId, `üìà *T·ªïng thu nh·∫≠p th√°ng ${new Date().getMonth() + 1}:*\nüíµ ${total} VND`, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, `‚ùå Kh√¥ng th·ªÉ t√≠nh t·ªïng thu nh·∫≠p. Ph·∫£n h·ªìi t·ª´ server: *${data.message || 'Unknown error'}*`, { parse_mode: 'Markdown' });
            }
        } else if (action === 'totalRemaining') {
            const expenseUrl = new URL(process.env.WEBHOOK_URL_V2);
            expenseUrl.searchParams.append('action', 'getMonthlyTotal');
            const incomeUrl = new URL(process.env.WEBHOOK_URL_V2);
            incomeUrl.searchParams.append('action', 'getMonthlyIncome');

            const [expenseData, incomeData] = await Promise.all([callApi(expenseUrl), callApi(incomeUrl)]);
            console.log('Total Remaining - Expense Response:', expenseData); // Log expense data
            console.log('Total Remaining - Income Response:', incomeData); // Log income data

            if (
                expenseData.status === 'success' &&
                incomeData.status === 'success' &&
                typeof expenseData.total === 'number' &&
                typeof incomeData.total === 'number'
            ) {
                const remaining = incomeData.total - expenseData.total;
                bot.sendMessage(
                    chatId,
                    `üí∞ *T·ªïng ti·ªÅn c√≤n l·∫°i th√°ng ${new Date().getMonth() + 1}:*\n\nüìà *T·ªïng thu*: ${incomeData.total.toLocaleString('vi-VN')} VND\nüìâ *T·ªïng chi*: ${expenseData.total.toLocaleString('vi-VN')} VND\nüíµ *S·ªë ti·ªÅn c√≤n l·∫°i*: ${remaining.toLocaleString('vi-VN')} VND`,
                    { parse_mode: 'Markdown' }
                );
            } else {
                bot.sendMessage(chatId, '‚ùå Kh√¥ng th·ªÉ t√≠nh t·ªïng s·ªë ti·ªÅn c√≤n l·∫°i. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu t·ª´ server.', { parse_mode: 'Markdown' });
            }
        }
    } catch (err) {
        sendErrorMessage(chatId, err);
    }
};

// X·ª≠ l√Ω n√∫t b·∫•m
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const action = callbackQuery.data;

    if (action === 'deleteAllData') {
        try {
            const url = new URL(process.env.WEBHOOK_URL_V2);
            url.searchParams.append('action', 'deleteAllData');

            const data = await callApi(url);
            console.log('Delete All Data Response:', data); // Log response t·ª´ API
            if (data.status === 'success') {
                bot.sendMessage(chatId, 'üóëÔ∏è *D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!* üöÄ', { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, `‚ùå Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu. Ph·∫£n h·ªìi t·ª´ server: *${data.message || 'Unknown error'}*`, { parse_mode: 'Markdown' });
            }
        } catch (err) {
            sendErrorMessage(chatId, err);
        }
    } else {
        handleSummary(chatId, action);
    }
});

// X·ª≠ l√Ω l·ªánh nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
bot.onText(/(.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const text = match[1].trim();

    const expenseRegex = /^([\d,.]+(?:k|K|tri·ªáu|TRI·ªÜU)?\s+.+)$/; // Ti·ªÅn ra
    const incomeRegex = /^\+([\d,.]+(?:k|K|tri·ªáu|TRI·ªÜU)?\s+.+)$/; // Ti·ªÅn v√†o
    const totalExpenseRegex = /^t·ªïng chi$/i; // T·ªïng chi
    const totalIncomeRegex = /^t·ªïng thu$/i; // T·ªïng thu
    const totalRemainingRegex = /^t·ªïng c√≤n l·∫°i$/i; // T·ªïng c√≤n l·∫°i

    if (text === '/start') {
        return;
    }

    if (totalExpenseRegex.test(text)) {
        handleSummary(chatId, 'totalExpense');
    } else if (totalIncomeRegex.test(text)) {
        handleSummary(chatId, 'totalIncome');
    } else if (totalRemainingRegex.test(text)) {
        handleSummary(chatId, 'totalRemaining');
    } else if (expenseRegex.test(text)) {
        const [, details] = text.match(expenseRegex);
        const [amount, ...noteParts] = details.split(' ');
        const note = noteParts.join(' ');
        const timestamp = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });

        handleTransaction(chatId, 'Ti·ªÅn ra', parseAmount(amount), note, timestamp);
    } else if (incomeRegex.test(text)) {
        const [, details] = text.match(incomeRegex);
        const [amount, ...noteParts] = details.split(' ');
        const note = noteParts.join(' ');
        const timestamp = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });

        handleTransaction(chatId, 'Ti·ªÅn v√†o', parseAmount(amount), note, timestamp);
    } else {
        bot.sendMessage(
            chatId,
            '‚ùå *C√∫ ph√°p kh√¥ng h·ª£p l·ªá!*\n\nüìù *V√≠ d·ª•:*\n- `15k ƒÉn s√°ng` (ti·ªÅn ra)\n- `+7tri·ªáu ti·ªÅn l∆∞∆°ng` (ti·ªÅn v√†o)\n- `t·ªïng chi` (t√≠nh t·ªïng chi ti√™u)\n- `t·ªïng thu` (t√≠nh t·ªïng thu nh·∫≠p)\n- `t·ªïng c√≤n l·∫°i` (t√≠nh t·ªïng s·ªë ti·ªÅn c√≤n l·∫°i)',
            { parse_mode: 'Markdown' }
        );
    }
});

console.log('Bot is running...');
import express from 'express';

const app = express();
const PORT = process.env.PORT || 3000;

// Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ·ª©ng d·ª•ng
app.get('/', (req, res) => {
    res.send('Bot is running!');
});

// M√°y ch·ªß HTTP l·∫Øng nghe
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
