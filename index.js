import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import 'dotenv/config';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// Ch√†o m·ª´ng ng∆∞·ªùi d√πng khi h·ªç g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || 'b·∫°n';
    bot.sendMessage(
        chatId,
        `Xin ch√†o, ${userName}! üëã\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n.\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh sau:\n- Ghi chi ti√™u: \`15k ƒÉn s√°ng\`\n- Ghi thu nh·∫≠p: \`+7 tri·ªáu ti·ªÅn l∆∞∆°ng\`\n- Xem t·ªïng chi: \`t·ªïng chi\`\n- Xem t·ªïng thu: \`t·ªïng thu\`\n- Xem s·ªë ti·ªÅn c√≤n l·∫°i: \`t·ªïng c√≤n l·∫°i\`\n\nH√£y b·∫Øt ƒë·∫ßu qu·∫£n l√Ω t√†i ch√≠nh ngay n√†o! üöÄ`,
        { parse_mode: 'Markdown' }
    );
});

// Nh·∫≠n di·ªán c√°c l·ªánh
bot.onText(/(.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const text = match[1].trim();

    // Regex to identify commands
    const expenseRegex = /^([\d,.]+(?:k|K|tri·ªáu|TRI·ªÜU)?\s+.+)$/; // Ti·ªÅn ra
    const incomeRegex = /^\+([\d,.]+(?:k|K|tri·ªáu|TRI·ªÜU)?\s+.+)$/; // Ti·ªÅn v√†o
    const totalExpenseRegex = /^t·ªïng chi$/i; // T·ªïng chi
    const totalIncomeRegex = /^t·ªïng thu$/i; // T·ªïng thu
    const totalRemainingRegex = /^t·ªïng c√≤n l·∫°i$/i; // T·ªïng c√≤n l·∫°i

    // Handle "t·ªïng chi"
    if (totalExpenseRegex.test(text)) {
        const url = new URL(process.env.WEBHOOK_URL_V2);
        url.searchParams.append('action', 'getMonthlyTotal');

        fetch(url)
            .then(res => res.json())
            .then(data => {
                if (data.status === 'success' && typeof data.total === 'number') {
                    const total = data.total.toLocaleString('vi-VN');
                    bot.sendMessage(chatId, `\u2705 T·ªïng chi ti√™u th√°ng ${new Date().getMonth() + 1}: ${total} VND`);
                } else {
                    bot.sendMessage(chatId, `Kh√¥ng th·ªÉ t√≠nh t·ªïng chi ti√™u. Ph·∫£n h·ªìi t·ª´ server: ${data.message || 'Unknown error'}`);
                }
            })
            .catch(err => {
                console.error('Fetch error:', err);
                bot.sendMessage(chatId, 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!');
            });
        return;
    }

    // Handle "t·ªïng thu"
    if (totalIncomeRegex.test(text)) {
        const url = new URL(process.env.WEBHOOK_URL_V2);
        url.searchParams.append('action', 'getMonthlyIncome');

        fetch(url)
            .then(res => res.json())
            .then(data => {
                if (data.status === 'success' && typeof data.total === 'number') {
                    const total = data.total.toLocaleString('vi-VN');
                    bot.sendMessage(chatId, `\u2705 T·ªïng thu nh·∫≠p th√°ng ${new Date().getMonth() + 1}: ${total} VND`);
                } else {
                    bot.sendMessage(chatId, `Kh√¥ng th·ªÉ t√≠nh t·ªïng thu nh·∫≠p. Ph·∫£n h·ªìi t·ª´ server: ${data.message || 'Unknown error'}`);
                }
            })
            .catch(err => {
                console.error('Fetch error:', err);
                bot.sendMessage(chatId, 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!');
            });
        return;
    }

    // Handle "t·ªïng c√≤n l·∫°i"
    if (totalRemainingRegex.test(text)) {
        const expenseUrl = new URL(process.env.WEBHOOK_URL_V2);
        expenseUrl.searchParams.append('action', 'getMonthlyTotal');

        const incomeUrl = new URL(process.env.WEBHOOK_URL_V2);
        incomeUrl.searchParams.append('action', 'getMonthlyIncome');

        Promise.all([
            fetch(expenseUrl).then(res => res.json()),
            fetch(incomeUrl).then(res => res.json())
        ])
            .then(([expenseData, incomeData]) => {
                if (
                    expenseData.status === 'success' &&
                    incomeData.status === 'success' &&
                    typeof expenseData.total === 'number' &&
                    typeof incomeData.total === 'number'
                ) {
                    const remaining = incomeData.total - expenseData.total;
                    bot.sendMessage(
                        chatId,
                        `\u2705 T·ªïng s·ªë ti·ªÅn c√≤n l·∫°i th√°ng ${new Date().getMonth() + 1}:\n- T·ªïng thu: ${incomeData.total.toLocaleString('vi-VN')} VND\n- T·ªïng chi: ${expenseData.total.toLocaleString('vi-VN')} VND\n- S·ªë ti·ªÅn c√≤n l·∫°i: ${remaining.toLocaleString('vi-VN')} VND`
                    );
                } else {
                    bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ t√≠nh t·ªïng s·ªë ti·ªÅn c√≤n l·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu t·ª´ server.');
                }
            })
            .catch(err => {
                console.error('Fetch error:', err);
                bot.sendMessage(chatId, 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!');
            });
        return;
    }

    let type = '';
    let amount = '';
    let note = '';

    if (expenseRegex.test(text)) {
        type = 'Ti·ªÅn ra';
        const [, details] = text.match(expenseRegex);
        [amount, ...note] = details.split(' ');
    } else if (incomeRegex.test(text)) {
        type = 'Ti·ªÅn v√†o';
        const [, details] = text.match(incomeRegex);
        [amount, ...note] = details.split(' ');
    } else {
        bot.sendMessage(
            chatId,
            'C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.\n\nV√≠ d·ª•:\n- `15k ƒÉn s√°ng` (ti·ªÅn ra)\n- `+7 tri·ªáu ti·ªÅn l∆∞∆°ng` (ti·ªÅn v√†o)\n- `t·ªïng chi` (t√≠nh t·ªïng chi ti√™u)\n- `t·ªïng thu` (t√≠nh t·ªïng thu nh·∫≠p)\n- `t·ªïng c√≤n l·∫°i` (t√≠nh t·ªïng s·ªë ti·ªÅn c√≤n l·∫°i)',
            { parse_mode: 'Markdown' }
        );
        return;
    }

    // Convert amount to numeric value
    if (amount.toLowerCase().endsWith('k')) {
        amount = parseFloat(amount.replace('k', '').replace(/,/g, '')) * 1000;
    } else if (amount.toLowerCase().includes('tri·ªáu')) {
        amount = parseFloat(amount.toLowerCase().replace('tri·ªáu', '').replace(/,/g, '').trim()) * 1000000;
    } else {
        amount = parseFloat(amount.replace(/[^\d.]/g, ''));
    }

    note = note.join(' ');
    const timestamp = new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });

    const url = new URL(process.env.WEBHOOK_URL);
    url.searchParams.append('amount', amount);
    url.searchParams.append('type', type);
    url.searchParams.append('note', note);
    url.searchParams.append('timestamp', timestamp);

    fetch(url)
        .then(res => res.json())
        .then(data => {
            if (data.status === 'success') {
                bot.sendMessage(
                    chatId,
                    `\u2705 ƒê√£ ghi l·∫°i: \n- S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')}\n- Lo·∫°i: ${type}\n- Ghi ch√∫: ${note}\n- Th·ªùi gian: ${timestamp}`
                );
            } else {
                bot.sendMessage(chatId, `Kh√¥ng th·ªÉ th√™m. Ph·∫£n h·ªìi t·ª´ server: ${data.message || 'Unknown error'}`);
            }
        })
        .catch(err => {
            console.error('Fetch error:', err);
            bot.sendMessage(chatId, 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!');
        });
});

console.log('Bot is running...');
